"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cheerio = require("cheerio");
const requests_1 = require("./requests");
const models_1 = require("./models");
const scrape = async (url) => {
    const baseUrl = 'https://finance.yahoo.com';
    let cryptoCurrenciesPage;
    let loadPage = async (url) => {
        let page;
        try {
            page = await (0, requests_1.reqPage)(url);
        }
        catch (error) {
            // Optional: Wrap errors
            console.log(`Error: ${error}`);
            return;
        }
        return page;
    };
    let fillAdditionalData = (obj, pageData) => {
        obj.previousClosePrice = pageData('#Main').find('[data-test="PREV_CLOSE-value"]').text();
        obj.openPrice = pageData('#Main').find('[data-test="OPEN-value"]').text();
        obj.daysRange = pageData('#Main').find('[data-test="DAYS_RANGE-value"]').text();
    };
    let columnNames = {
        name: "name",
        symbol: "symbol",
        circulatingSupply: "circulating supply",
        daysRange: "day's range",
        link: "link",
        marketCap: "market cap",
        openPrice: "open",
        price: "price (intraday)",
        previousClosePrice: "previous close"
    };
    cryptoCurrenciesPage = await loadPage(url);
    if (!cryptoCurrenciesPage) {
        console.error("Page doesn't exist");
        return;
    }
    const $ = cheerio.load(cryptoCurrenciesPage.data);
    const result = [];
    let elems = $('tbody .simpTblRow').get();
    for (const el of elems) {
        let row = new models_1.CryptoRowData('', '', '', '', '', '', '', '', '');
        let subPage;
        $(el).find("td").each((i, el) => {
            var _a;
            for (const iter in columnNames) {
                if (!columnNames.hasOwnProperty(iter)) {
                    continue;
                }
                if (((_a = $(el).attr("aria-label")) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === columnNames[iter]) {
                    row[iter] = $(el).text();
                }
            }
        });
        row.link = baseUrl + $(el).find('[data-test="quoteLink"]').attr("href");
        subPage = await loadPage(row.link);
        if (!subPage) {
            console.error('no subpage found!');
            continue;
        }
        const pageData = cheerio.load(subPage.data);
        fillAdditionalData(row, pageData);
        result.push(row);
    }
    console.log(JSON.stringify(result, null, 4));
    //1. read table rows
    //2. get data from every row
    //3. request and parse detail view of every row
    //4. get data from detail view
    //5. create CryptoRowData object from data
    //6. push object into result array
    //7. convert result array into CSV string (csv-stringify)
    //8. write output.csv file (fs.writeFileSync)
};
(async () => {
    const startingUrl = 'https://finance.yahoo.com/cryptocurrencies';
    await scrape(startingUrl);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyYXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NjcmFwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFtQztBQUNuQyx5Q0FBbUM7QUFDbkMscUNBQWtEO0FBRWxELE1BQU0sTUFBTSxHQUFHLEtBQUssRUFBRSxHQUFXLEVBQWlCLEVBQUU7SUFDaEQsTUFBTSxPQUFPLEdBQUcsMkJBQTJCLENBQUM7SUFDNUMsSUFBSSxvQkFBb0IsQ0FBQztJQUN6QixJQUFJLFFBQVEsR0FBRyxLQUFLLEVBQUUsR0FBVyxFQUFFLEVBQUU7UUFDakMsSUFBSSxJQUFJLENBQUE7UUFDUixJQUFJO1lBQ0EsSUFBSSxHQUFHLE1BQU0sSUFBQSxrQkFBTyxFQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzdCO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDWix3QkFBd0I7WUFDeEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDL0IsT0FBTztTQUNWO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQyxDQUFBO0lBQ0QsSUFBSSxrQkFBa0IsR0FBRyxDQUFDLEdBQWMsRUFBRSxRQUE0QixFQUFFLEVBQUU7UUFDdEUsR0FBRyxDQUFDLGtCQUFrQixHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0NBQWdDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUN4RixHQUFHLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUN6RSxHQUFHLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0NBQWdDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtJQUNuRixDQUFDLENBQUE7SUFDRCxJQUFJLFdBQVcsR0FBYztRQUN6QixJQUFJLEVBQUUs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QUE7QUFDN0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNoZWVyaW8gZnJvbSAnY2hlZXJpbyc7XG5pbXBvcnQge3JlcVBhZ2V9IGZyb20gJy4vcmVxdWVzdHMnO1xuaW1wb3J0IHtDcnlwdG9Sb3dEYXRhLCBDcnlwdG9Sb3d9IGZyb20gXCIuL21vZGVsc1wiO1xuXG5jb25zdCBzY3JhcGUgPSBhc3luYyAodXJsOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBjb25zdCBiYXNlVXJsID0gJ2h0dHBzOi8vZmluYW5jZS55YWhvby5jb20nO1xuICAgIGxldCBjcnlwdG9DdXJyZW5jaWVzUGFnZTtcbiAgICBsZXQgbG9hZFBhZ2UgPSBhc3luYyAodXJsOiBzdHJpbmcpID0+IHtcbiAgICAgICAgbGV0IHBhZ2VcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHBhZ2UgPSBhd2FpdCByZXFQYWdlKHVybCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAvLyBPcHRpb25hbDogV3JhcCBlcnJvcnNcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBFcnJvcjogJHtlcnJvcn1gKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFnZTtcbiAgICB9XG4gICAgbGV0IGZpbGxBZGRpdGlvbmFsRGF0YSA9IChvYmo6IENyeXB0b1JvdywgcGFnZURhdGE6IGNoZWVyaW8uQ2hlZXJpb0FQSSkgPT4ge1xuICAgICAgICBvYmoucHJldmlvdXNDbG9zZVByaWNlID0gcGFnZURhdGEoJyNNYWluJykuZmluZCgnW2RhdGEtdGVzdD1cIlBSRVZfQ0xPU0UtdmFsdWVcIl0nKS50ZXh0KClcbiAgICAgICAgb2JqLm9wZW5QcmljZSA9IHBhZ2VEYXRhKCcjTWFpbicpLmZpbmQoJ1tkYXRhLXRlc3Q9XCJPUEVOLXZhbHVlXCJdJykudGV4dCgpXG4gICAgICAgIG9iai5kYXlzUmFuZ2UgPSBwYWdlRGF0YSgnI01haW4nKS5maW5kKCdbZGF0YS10ZXN0PVwiREFZU19SQU5HRS12YWx1ZVwiXScpLnRleHQoKVxuICAgIH1cbiAgICBsZXQgY29sdW1uTmFtZXM6IENyeXB0b1JvdyA9IHtcbiAgICAgICAgbmFtZTogXCJuYW1lXCIsXG4gICAgICAgIHN5bWJvbDogXCJzeW1ib2xcIixcbiAgICAgICAgY2lyY3VsYXRpbmdTdXBwbHk6IFwiY2lyY3VsYXRpbmcgc3VwcGx5XCIsXG4gICAgICAgIGRheXNSYW5nZTogXCJkYXkncyByYW5nZVwiLFxuICAgICAgICBsaW5rOiBcImxpbmtcIixcbiAgICAgICAgbWFya2V0Q2FwOiBcIm1hcmtldCBjYXBcIixcbiAgICAgICAgb3BlblByaWNlOiBcIm9wZW5cIixcbiAgICAgICAgcHJpY2U6IFwicHJpY2UgKGludHJhZGF5KVwiLFxuICAgICAgICBwcmV2aW91c0Nsb3NlUHJpY2U6IFwicHJldmlvdXMgY2xvc2VcIlxuICAgIH1cbiAgICBjcnlwdG9DdXJyZW5jaWVzUGFnZSA9IGF3YWl0IGxvYWRQYWdlKHVybClcbiAgICBpZiAoIWNyeXB0b0N1cnJlbmNpZXNQYWdlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJQYWdlIGRvZXNuJ3QgZXhpc3RcIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgJCA9IGNoZWVyaW8ubG9hZChjcnlwdG9DdXJyZW5jaWVzUGFnZS5kYXRhKTtcbiAgICBjb25zdCByZXN1bHQ6IENyeXB0b1Jvd0RhdGFbXSA9IFtdO1xuXG4gICAgbGV0IGVsZW1zID0gJCgndGJvZHkgLnNpbXBUYmxSb3cnKS5nZXQoKVxuICAgIGZvciAoY29uc3QgZWwgb2YgZWxlbXMpIHtcbiAgICAgICAgbGV0IHJvdzogQ3J5cHRvUm93RGF0YSA9IG5ldyBDcnlwdG9Sb3dEYXRhKCcnLCAnJywgJycsICcnLCAnJywgJycsICcnLCAnJywgJycpO1xuICAgICAgICBsZXQgc3ViUGFnZTtcbiAgICAgICAgJChlbCkuZmluZChcInRkXCIpLmVhY2goKGksIGVsKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZXIgaW4gY29sdW1uTmFtZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWNvbHVtbk5hbWVzLmhhc093blByb3BlcnR5KGl0ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoJChlbCkuYXR0cihcImFyaWEtbGFiZWxcIik/LnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09IGNvbHVtbk5hbWVzW2l0ZXJdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJvd1tpdGVyXSA9ICQoZWwpLnRleHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIHJvdy5saW5rID0gYmFzZVVybCArICQoZWwpLmZpbmQoJ1tkYXRhLXRlc3Q9XCJxdW90ZUxpbmtcIl0nKS5hdHRyKFwiaHJlZlwiKTtcbiAgICAgICAgc3ViUGFnZSA9IGF3YWl0IGxvYWRQYWdlKHJvdy5saW5rKVxuICAgICAgICBpZiAoIXN1YlBhZ2UpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ25vIHN1YnBhZ2UgZm91bmQhJylcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhZ2VEYXRhID0gY2hlZXJpby5sb2FkKHN1YlBhZ2UuZGF0YSlcbiAgICAgICAgZmlsbEFkZGl0aW9uYWxEYXRhKHJvdywgcGFnZURhdGEpXG4gICAgICAgIHJlc3VsdC5wdXNoKHJvdylcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShyZXN1bHQsIG51bGwsIDQpKVxuICAgIC8vMS4gcmVhZCB0YWJsZSByb3dzXG4gICAgLy8yLiBnZXQgZGF0YSBmcm9tIGV2ZXJ5IHJvd1xuICAgIC8vMy4gcmVxdWVzdCBhbmQgcGFyc2UgZGV0YWlsIHZpZXcgb2YgZXZlcnkgcm93XG4gICAgLy80LiBnZXQgZGF0YSBmcm9tIGRldGFpbCB2aWV3XG4gICAgLy81LiBjcmVhdGUgQ3J5cHRvUm93RGF0YSBvYmplY3QgZnJvbSBkYXRhXG4gICAgLy82LiBwdXNoIG9iamVjdCBpbnRvIHJlc3VsdCBhcnJheVxuICAgIC8vNy4gY29udmVydCByZXN1bHQgYXJyYXkgaW50byBDU1Ygc3RyaW5nIChjc3Ytc3RyaW5naWZ5KVxuICAgIC8vOC4gd3JpdGUgb3V0cHV0LmNzdiBmaWxlIChmcy53cml0ZUZpbGVTeW5jKVxuXG59XG5cbihhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgc3RhcnRpbmdVcmwgPSAnaHR0cHM6Ly9maW5hbmNlLnlhaG9vLmNvbS9jcnlwdG9jdXJyZW5jaWVzJztcbiAgICBhd2FpdCBzY3JhcGUoc3RhcnRpbmdVcmwpXG59KSgpO1xuIl19
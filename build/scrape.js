"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cheerio = require("cheerio");
const requests_1 = require("./requests");
const scrape = async (url) => {
    let page;
    try {
        page = await (0, requests_1.reqPage)(url);
    }
    catch (error) {
        // Optional: Wrap errors
        console.log(`Error: ${error}`);
        return;
    }
    const $ = cheerio.load(page.data);
    const result = [];
    $('tbody .simpTblRow').each((i, el) => {
        let rawRowData = {};
        let row;
        $(el).find("td").each((i, el) => {
            let prop = $(el).attr("aria-label").toLocaleLowerCase();
            rawRowData[prop] = $(el).text();
        });
        // for (const attribute of rawRowData) {
        //
        // }
        result.push(rawRowData);
    });
    console.log(JSON.stringify(result));
    //1. read table rows
    //2. get data from every row
    //3. request and parse detail view of every row
    //4. get data from detail view
    //5. create CryptoRowData object from data
    //6. push object into result array
    //7. convert result array into CSV string (csv-stringify)
    //8. write output.csv file (fs.writeFileSync)
};
(async () => {
    const startingUrl = 'https://finance.yahoo.com/cryptocurrencies/';
    await scrape(startingUrl);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyYXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NjcmFwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFtQztBQUNuQyx5Q0FBbUM7QUFHbkMsTUFBTSxNQUFNLEdBQUcsS0FBSyxFQUFFLEdBQVcsRUFBaUIsRUFBRTtJQUNoRCxJQUFJLElBQUksQ0FBQTtJQUNSLElBQUk7UUFDQSxJQUFJLEdBQUcsTUFBTSxJQUFBLGtCQUFPLEVBQUMsR0FBRyxDQUFDLENBQUM7S0FFN0I7SUFBQyxPQUFPLEtBQUssRUFBRTtRQUNaLHdCQUF3QjtRQUN4QixPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUMvQixPQUFPO0tBQ1Y7SUFFRCxNQUFNLENBQUMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQyxNQUFNLE1BQU0sR0FBb0IsRUFBRSxDQUFDO0lBQ25DLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRTtRQUNsQyxJQUFJLFVBQVUsR0FBVyxFQUFFLENBQUE7UUFDM0IsSUFBSSxHQUFjLENBQUM7UUFDbkIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUU7WUFDNUIsSUFBSSxJQUFJLEdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFBO1lBQy9ELFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQUE7UUFDRSx3Q0FBd0M7UUFDeEMsRUFBRTtRQUNGLElBQUk7UUFDSixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQy9CLENBQUMsQ0FBQyxDQUFBO0lBRUYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUE7SUFHbkMsb0JBQW9CO0lBQ3BCLDRCQUE0QjtJQUM1QiwrQ0FBK0M7SUFDL0MsOEJBQThCO0lBQzlCLDBDQUEwQztJQUMxQyxrQ0FBa0M7SUFDbEMseURBQXlEO0lBQ3pELDZDQUE2QztBQUVqRCxDQUFDLENBQUE7QUFFRCxDQUFDLEtBQUssSUFBSSxFQUFFO0lBQ1IsTUFBTSxXQUFXLEdBQUcsNkNBQTZDLENBQUM7SUFDbEUsTUFBTSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7QUFDN0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNoZWVyaW8gZnJvbSAnY2hlZXJpbyc7XG5pbXBvcnQge3JlcVBhZ2V9IGZyb20gJy4vcmVxdWVzdHMnO1xuaW1wb3J0IHtDcnlwdG9Sb3dEYXRhLCBDcnlwdG9Sb3d9IGZyb20gXCIuL21vZGVsc1wiO1xuXG5jb25zdCBzY3JhcGUgPSBhc3luYyAodXJsOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBsZXQgcGFnZVxuICAgIHRyeSB7XG4gICAgICAgIHBhZ2UgPSBhd2FpdCByZXFQYWdlKHVybCk7XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBPcHRpb25hbDogV3JhcCBlcnJvcnNcbiAgICAgICAgY29uc29sZS5sb2coYEVycm9yOiAke2Vycm9yfWApO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgJCA9IGNoZWVyaW8ubG9hZChwYWdlLmRhdGEpO1xuICAgIGNvbnN0IHJlc3VsdDogQ3J5cHRvUm93RGF0YVtdID0gW107XG4gICAgJCgndGJvZHkgLnNpbXBUYmxSb3cnKS5lYWNoKChpLCBlbCkgPT4ge1xuICAgICAgICBsZXQgcmF3Um93RGF0YTogb2JqZWN0ID0ge31cbiAgICAgICAgbGV0IHJvdzogQ3J5cHRvUm93O1xuICAgICAgICAkKGVsKS5maW5kKFwidGRcIikuZWFjaCgoaSwgZWwpID0+IHtcbiAgICAgICAgICAgIGxldCBwcm9wOiBzdHJpbmcgPSAkKGVsKS5hdHRyKFwiYXJpYS1sYWJlbFwiKS50b0xvY2FsZUxvd2VyQ2FzZSgpXG4gICAgICAgICAgICByYXdSb3dEYXRhW3Byb3BdID0gJChlbCkudGV4dCgpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLy8gZm9yIChjb25zdCBhdHRyaWJ1dGUgb2YgcmF3Um93RGF0YSkge1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHJhd1Jvd0RhdGEpXG4gICAgfSlcblxuICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KHJlc3VsdCkpXG5cblxuICAgIC8vMS4gcmVhZCB0YWJsZSByb3dzXG4gICAgLy8yLiBnZXQgZGF0YSBmcm9tIGV2ZXJ5IHJvd1xuICAgIC8vMy4gcmVxdWVzdCBhbmQgcGFyc2UgZGV0YWlsIHZpZXcgb2YgZXZlcnkgcm93XG4gICAgLy80LiBnZXQgZGF0YSBmcm9tIGRldGFpbCB2aWV3XG4gICAgLy81LiBjcmVhdGUgQ3J5cHRvUm93RGF0YSBvYmplY3QgZnJvbSBkYXRhXG4gICAgLy82LiBwdXNoIG9iamVjdCBpbnRvIHJlc3VsdCBhcnJheVxuICAgIC8vNy4gY29udmVydCByZXN1bHQgYXJyYXkgaW50byBDU1Ygc3RyaW5nIChjc3Ytc3RyaW5naWZ5KVxuICAgIC8vOC4gd3JpdGUgb3V0cHV0LmNzdiBmaWxlIChmcy53cml0ZUZpbGVTeW5jKVxuXG59XG5cbihhc3luYyAoKSA9PiB7XG4gICAgY29uc3Qgc3RhcnRpbmdVcmwgPSAnaHR0cHM6Ly9maW5hbmNlLnlhaG9vLmNvbS9jcnlwdG9jdXJyZW5jaWVzLyc7XG4gICAgYXdhaXQgc2NyYXBlKHN0YXJ0aW5nVXJsKVxufSkoKTtcbiJdfQ==
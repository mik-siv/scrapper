"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cheerio = require("cheerio");
const requests_1 = require("./requests");
const scrape = async (url) => {
    const baseUrl = 'https://finance.yahoo.com';
    let page;
    try {
        page = await (0, requests_1.reqPage)(url);
    }
    catch (error) {
        // Optional: Wrap errors
        console.log(`Error: ${error}`);
        return;
    }
    let columnNames = {
        name: "name",
        symbol: "symbol",
        circulatingSupply: "circulating supply",
        daysRange: "day's range",
        link: "link",
        marketCap: "market cap",
        openPrice: "open",
        price: "price (intraday)",
        previousClosePrice: "previous close"
    };
    const $ = cheerio.load(page.data);
    const result = [];
    $('tbody .simpTblRow').each(async (i, el) => {
        let row = {};
        $(el).find("td").each((i, el) => {
            var _a;
            for (const iter in columnNames) {
                if (((_a = $(el).attr("aria-label")) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === columnNames[iter]) {
                    row[iter] = $(el).text();
                }
            }
        });
        let linkAddress = $(el).find('[data-test="quoteLink"]').attr("href");
        row.link = baseUrl + linkAddress;
        let subPage;
        try {
            subPage = await (0, requests_1.reqPage)(row.link);
        }
        catch (err) {
            console.log(err);
            return;
        }
        const pageData = cheerio.load(subPage.data);
        row.previousClosePrice = pageData('#Main').find('[data-test="PREV_CLOSE-value"]').text();
        row.openPrice = pageData('#Main').find('[data-test="OPEN-value"]').text();
        row.daysRange = pageData('#Main').find('[data-test="DAYS_RANGE-value"]').text();
        result.push(row);
        console.log(result.length);
    });
    //1. read table rows
    //2. get data from every row
    //3. request and parse detail view of every row
    //4. get data from detail view
    //5. create CryptoRowData object from data
    //6. push object into result array
    //7. convert result array into CSV string (csv-stringify)
    //8. write output.csv file (fs.writeFileSync)
};
(async () => {
    const startingUrl = 'https://finance.yahoo.com/cryptocurrencies';
    await scrape(startingUrl);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyYXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NjcmFwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFtQztBQUNuQyx5Q0FBbUM7QUFHbkMsTUFBTSxNQUFNLEdBQUcsS0FBSyxFQUFFLEdBQVcsRUFBaUIsRUFBRTtJQUNoRCxNQUFNLE9BQU8sR0FBRywyQkFBMkIsQ0FBQTtJQUMzQyxJQUFJLElBQUksQ0FBQTtJQUNSLElBQUk7UUFDQSxJQUFJLEdBQUcsTUFBTSxJQUFBLGtCQUFPLEVBQUMsR0FBRyxDQUFDLENBQUM7S0FDN0I7SUFBQyxPQUFPLEtBQUssRUFBRTtRQUNaLHdCQUF3QjtRQUN4QixPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUMvQixPQUFPO0tBQ1Y7SUFDRCxJQUFJLFdBQVcsR0FBYztRQUN6QixJQUFJLEVBQUUsTUFBTTtRQUNaLE1BQU0sRUFBRSxRQUFRO1FBQ2hCLGlCQUFpQixFQUFFLG9CQUFvQjtRQUN2QyxTQUFTLEVBQUUsYUFBYTtRQUN4QixJQUFJLEVBQUUsTUFBTTtRQUNaLFNBQVMsRUFBRSxZQUFZO1FBQ3ZCLFNBQVMsRUFBRSxNQUFNO1FBQ2pCLEtBQUssRUFBRSxrQkFBa0I7UUFDekIsa0JBQWtCLEVBQUUsZ0JBQWdCO0tBQ3ZDLENBQUE7SUFFRCxNQUFNLENBQUMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQyxNQUFNLE1BQU0sR0FBb0IsRUFBRSxDQUFDO0lBQ25DLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFO1FBQ3hDLElBQUksR0FBRyxHQUFPLEVBQUUsQ0FBQztRQUNqQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRTs7WUFDNUIsS0FBSyxNQUFNLElBQUksSUFBSSxXQUFXLEVBQUU7Z0JBQzVCLElBQUksQ0FBQSxNQUFBLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLDBDQUFFLGlCQUFpQixFQUFFLE1BQUssV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFO29CQUNyRSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO2lCQUM1QjthQUNKO1FBQ0wsQ0FBQyxDQUFDLENBQUE7UUFDRixJQUFJLFdBQVcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JFLEdBQUcsQ0FBQyxJQUFJLEdBQUcsT0FBTyxHQUFHLFdBQVcsQ0FBQztRQUNqQyxJQUFJLE9BQU8sQ0FBQztRQUNaLElBQUk7WUFDQSxPQUFPLEdBQUcsTUFBTSxJQUFBLGtCQUFPLEVBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3JDO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDVixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2pCLE9BQU87U0FDVjtRQUNELE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQzNDLEdBQUcsQ0FBQyxrQkFBa0IsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDeEYsR0FBRyxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDekUsR0FBRyxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDL0UsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNoQixPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUM5QixDQUFDLENBQUMsQ0FBQTtJQUdGLG9CQUFvQjtJQUNwQiw0QkFBNEI7SUFDNUIsK0NBQStDO0lBQy9DLDhCQUE4QjtJQUM5QiwwQ0FBMEM7SUFDMUMsa0NBQWtDO0lBQ2xDLHlEQUF5RDtJQUN6RCw2Q0FBNkM7QUFFakQsQ0FBQyxDQUFBO0FBRUQsQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNSLE1BQU0sV0FBVyxHQUFHLDRDQUE0QyxDQUFDO0lBQ2pFLE1BQU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0FBQzdCLENBQUMsQ0FBQyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjaGVlcmlvIGZyb20gJ2NoZWVyaW8nO1xuaW1wb3J0IHtyZXFQYWdlfSBmcm9tICcuL3JlcXVlc3RzJztcbmltcG9ydCB7Q3J5cHRvUm93RGF0YSwgQ3J5cHRvUm93fSBmcm9tIFwiLi9tb2RlbHNcIjtcblxuY29uc3Qgc2NyYXBlID0gYXN5bmMgKHVybDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgY29uc3QgYmFzZVVybCA9ICdodHRwczovL2ZpbmFuY2UueWFob28uY29tJ1xuICAgIGxldCBwYWdlXG4gICAgdHJ5IHtcbiAgICAgICAgcGFnZSA9IGF3YWl0IHJlcVBhZ2UodXJsKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBPcHRpb25hbDogV3JhcCBlcnJvcnNcbiAgICAgICAgY29uc29sZS5sb2coYEVycm9yOiAke2Vycm9yfWApO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBjb2x1bW5OYW1lczogQ3J5cHRvUm93ID0ge1xuICAgICAgICBuYW1lOiBcIm5hbWVcIixcbiAgICAgICAgc3ltYm9sOiBcInN5bWJvbFwiLFxuICAgICAgICBjaXJjdWxhdGluZ1N1cHBseTogXCJjaXJjdWxhdGluZyBzdXBwbHlcIixcbiAgICAgICAgZGF5c1JhbmdlOiBcImRheSdzIHJhbmdlXCIsXG4gICAgICAgIGxpbms6IFwibGlua1wiLFxuICAgICAgICBtYXJrZXRDYXA6IFwibWFya2V0IGNhcFwiLFxuICAgICAgICBvcGVuUHJpY2U6IFwib3BlblwiLFxuICAgICAgICBwcmljZTogXCJwcmljZSAoaW50cmFkYXkpXCIsXG4gICAgICAgIHByZXZpb3VzQ2xvc2VQcmljZTogXCJwcmV2aW91cyBjbG9zZVwiXG4gICAgfVxuXG4gICAgY29uc3QgJCA9IGNoZWVyaW8ubG9hZChwYWdlLmRhdGEpO1xuICAgIGNvbnN0IHJlc3VsdDogQ3J5cHRvUm93RGF0YVtdID0gW107XG4gICAgJCgndGJvZHkgLnNpbXBUYmxSb3cnKS5lYWNoKGFzeW5jIChpLCBlbCkgPT4ge1xuICAgICAgICBsZXQgcm93OiB7fSA9IHt9O1xuICAgICAgICAkKGVsKS5maW5kKFwidGRcIikuZWFjaCgoaSwgZWwpID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRlciBpbiBjb2x1bW5OYW1lcykge1xuICAgICAgICAgICAgICAgIGlmICgkKGVsKS5hdHRyKFwiYXJpYS1sYWJlbFwiKT8udG9Mb2NhbGVMb3dlckNhc2UoKSA9PT0gY29sdW1uTmFtZXNbaXRlcl0pIHtcbiAgICAgICAgICAgICAgICAgICAgcm93W2l0ZXJdID0gJChlbCkudGV4dCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgbGV0IGxpbmtBZGRyZXNzID0gJChlbCkuZmluZCgnW2RhdGEtdGVzdD1cInF1b3RlTGlua1wiXScpLmF0dHIoXCJocmVmXCIpO1xuICAgICAgICByb3cubGluayA9IGJhc2VVcmwgKyBsaW5rQWRkcmVzcztcbiAgICAgICAgbGV0IHN1YlBhZ2U7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzdWJQYWdlID0gYXdhaXQgcmVxUGFnZShyb3cubGluayk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYWdlRGF0YSA9IGNoZWVyaW8ubG9hZChzdWJQYWdlLmRhdGEpXG4gICAgICAgIHJvdy5wcmV2aW91c0Nsb3NlUHJpY2UgPSBwYWdlRGF0YSgnI01haW4nKS5maW5kKCdbZGF0YS10ZXN0PVwiUFJFVl9DTE9TRS12YWx1ZVwiXScpLnRleHQoKVxuICAgICAgICByb3cub3BlblByaWNlID0gcGFnZURhdGEoJyNNYWluJykuZmluZCgnW2RhdGEtdGVzdD1cIk9QRU4tdmFsdWVcIl0nKS50ZXh0KClcbiAgICAgICAgcm93LmRheXNSYW5nZSA9IHBhZ2VEYXRhKCcjTWFpbicpLmZpbmQoJ1tkYXRhLXRlc3Q9XCJEQVlTX1JBTkdFLXZhbHVlXCJdJykudGV4dCgpXG4gICAgICAgIHJlc3VsdC5wdXNoKHJvdylcbiAgICAgICAgY29uc29sZS5sb2cocmVzdWx0Lmxlbmd0aClcbiAgICB9KVxuXG5cbiAgICAvLzEuIHJlYWQgdGFibGUgcm93c1xuICAgIC8vMi4gZ2V0IGRhdGEgZnJvbSBldmVyeSByb3dcbiAgICAvLzMuIHJlcXVlc3QgYW5kIHBhcnNlIGRldGFpbCB2aWV3IG9mIGV2ZXJ5IHJvd1xuICAgIC8vNC4gZ2V0IGRhdGEgZnJvbSBkZXRhaWwgdmlld1xuICAgIC8vNS4gY3JlYXRlIENyeXB0b1Jvd0RhdGEgb2JqZWN0IGZyb20gZGF0YVxuICAgIC8vNi4gcHVzaCBvYmplY3QgaW50byByZXN1bHQgYXJyYXlcbiAgICAvLzcuIGNvbnZlcnQgcmVzdWx0IGFycmF5IGludG8gQ1NWIHN0cmluZyAoY3N2LXN0cmluZ2lmeSlcbiAgICAvLzguIHdyaXRlIG91dHB1dC5jc3YgZmlsZSAoZnMud3JpdGVGaWxlU3luYylcblxufVxuXG4oYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHN0YXJ0aW5nVXJsID0gJ2h0dHBzOi8vZmluYW5jZS55YWhvby5jb20vY3J5cHRvY3VycmVuY2llcyc7XG4gICAgYXdhaXQgc2NyYXBlKHN0YXJ0aW5nVXJsKVxufSkoKTtcbiJdfQ==